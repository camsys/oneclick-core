:css
  .schedule-week-container .col-sm-9, .schedule-calendar-dates-container .col-sm-9, .schedule-calendar-times-container .col-sm-9 {
    width: 100%;
  }

  .optional-dates {
    padding: 0;
  }

  .date-input-div {
    padding: 0;
  }

  .date-label {
    text-align: right;
  }

-# For use in building new schedule forms
-mode = local_assigns[:mode]
-form_id = local_assigns[:form_id]
-f = local_assigns[:f]
-schedule_type = local_assigns[:schedule_type]

-weekly_sub_schedules = @service_schedule.service_sub_schedules.for_weekly_type.build
-weekly_schedules_json = @service_schedule.service_sub_schedules.for_weekly_type.for_display.to_json.html_safe
-calendar_date_sub_schedules = @service_schedule.service_sub_schedules.for_calendar_type.select('distinct on (calendar_date) *').build
-calendar_date_schedules_json = @service_schedule.service_sub_schedules.for_calendar_type.select('distinct on (calendar_date) *').for_display.to_json.html_safe
-calendar_time_sub_schedules = @service_schedule.service_sub_schedules.for_calendar_type.select('distinct on (start_time, end_time) *').build
-calendar_time_schedules_json = @service_schedule.service_sub_schedules.for_calendar_type.select('distinct on (start_time, end_time) *').for_calendar_time_display.to_json.html_safe

.form-inline.schedule-week-container{:data => {schedule_type: ServiceScheduleType.weekly_schedule.id}}
  -# Build a schedule row for each weekday
  -(0..6).each do |d|
    -day_scheds = @service_schedule.service_sub_schedules.by_day(d).for_display
    .panel.schedule-row-wrapper{class: day_scheds.empty? ? 'panel-default' : 'panel-info-bold'}
      .row.panel-body
        %label.col-sm-2.schedule-row-label
          %span{ class: day_scheds.empty? ? 'text-muted' : 'text-default' }
            =Date::DAYNAMES[d]
        .col-sm-10
          %span.sub-schedule-container{data: {day: d}}
            -# =render partial: 'admin/services/schedule_form', locals: {f: f, schedules: day_scheds}
          %button.btn.add-day-schedule{type:"button"}
            %span.text-muted Add hours
            %span.text-muted.glyphicon.glyphicon-plus
  .panel.schedule-row-wrapper{class: 'panel-default'}
    .row.panel-body
      .col-sm-6.optional-dates
        %label.col-sm-5.date-label
          Optional Start Date
        .col-sm-7.date-input-div
          = f.input :start_date,
            label: false,
            readonly: mode == 'view' ? true : false,
            as: :string,
            input_html: {class: 'schedule-input calendar-date datepicker'}
          %span.glyphicon.glyphicon-calendar
      .col-sm-6.optional-dates
        %label.col-sm-5.date-label
          Optional End Date
        .col-sm-6.date-input-div
          = f.input :end_date,
            label: false,
            readonly: mode == 'view' ? true : false,
            as: :string,
            input_html: {class: 'schedule-input calendar-date datepicker'}
          %span.glyphicon.glyphicon-calendar

.form-inline.schedule-calendar-dates-container{:data => {schedule_type: ServiceScheduleType.calendar_date_schedule.id}}
  -# Build a schedule row for calendar dates
  %label.col-sm-2.schedule-row-label
    %span{class: 'text-default'}
      Calendar Dates
  .panel.schedule-row-wrapper{class: 'panel-default'}
    .row.panel-body
      .col-sm-10
        %span.sub-schedule-container
        %button.btn.add-calendar-date-schedule{type:"button"}
          %span.text-muted Add a date
          %span.text-muted.glyphicon.glyphicon-plus

.form-inline.schedule-calendar-times-container{:data => {schedule_type: ServiceScheduleType.calendar_date_schedule.id}}
  -# Build a schedule row for times
  %label.col-sm-2.schedule-row-label
    %span{class: 'text-default'}
      Service Hours
  .panel.schedule-row-wrapper{class: 'panel-default'}
    .row.panel-body
      .col-sm-10
        %span.sub-schedule-container
        %button.btn.add-day-schedule{type:"button"}
          %span.text-muted Add hours
          %span.text-muted.glyphicon.glyphicon-plus

- if mode == 'view'
  - content_for :footer do
    =link_to "Done", admin_service_schedules_path, class: "btn btn-primary"

-# Script nested under form so it can reference it in ScheduleHelper call
:javascript
  $(document).ready(function() {

      var fh = new FormHandler($('#{form_id}'));
      var weeklySch = new ScheduleHelper(
        '#{weekly_schedules_json}',
        $('.schedule-week-container'),
        '#{escape_javascript render partial: "admin/service_schedules/weekly_service_sub_schedule", locals: {f: f, service_sub_schedules: weekly_sub_schedules, can_update: mode == 'view' ? false : (can? :update, @service_schedule)}}'
      );
      var calendarDateSch = new ScheduleHelper(
        '#{calendar_date_schedules_json}',
        $('.schedule-calendar-dates-container'),
        '#{escape_javascript render partial: "admin/service_schedules/calendar_dates_service_sub_schedule", locals: {f: f, calendar_dates: calendar_date_sub_schedules, can_update: mode == 'view' ? false : (can? :update, @service_schedule)}}'
      );
      var calendarTimeSch = new ScheduleHelper(
        '#{calendar_time_schedules_json}',
        $('.schedule-calendar-times-container'),
        '#{escape_javascript render partial: "admin/service_schedules/calendar_times_service_sub_schedule", locals: {f: f, calendar_times: calendar_time_sub_schedules, can_update: mode == 'view' ? false : (can? :update, @service_schedule)}}'
      );

      // Have the FormHandler watch the schedules for changes, plus trigger change event for the new schedule
      fh.watch($('.form-container'));

      // Reset the schedule divs on form reset
      fh.onReset(function() {
        if ('#{schedule_type&.id}' == '#{ServiceScheduleType.weekly_schedule.id}') {
          weeklySch.reset();
          calendarDateSch._clear();
          calendarTimeSch._clear();
          $(".form-inline[data-schedule-type != '#{schedule_type&.id}']").hide();
          $(".form-inline[data-schedule-type = '#{schedule_type&.id}']").show();
        }
        if ('#{schedule_type&.id}' == '#{ServiceScheduleType.calendar_date_schedule.id}') {
          calendarDateSch.reset();
          calendarTimeSch.reset();
          weeklySch._clear();
          $(".form-inline[data-schedule-type != '#{schedule_type&.id}']").hide();
          $(".form-inline[data-schedule-type = '#{schedule_type&.id}']").show();
        }
        else {
          weeklySch.reset();
          calendarDateSch.reset();
          calendarTimeSch.reset();
        }
      });

      // Click handler for adding new schedules
      $('.add-day-schedule').click(function() {
        var day = $(this).siblings('.sub-schedule-container').data().day;
        weeklySch.addSchedule(day).trigger('change');
      });
      $('.add-calendar-date-schedule').click(function() {
        calendarDateSch.addSchedule(null).trigger('change');
      });
      $('.add-calendar-time-schedule').click(function() {
        calendarTimeSch.addSchedule(null).trigger('change');
      });

      $("#service_schedule_service_schedule_type_id").on("change", function() {
        schedule_type = $(this).val();
        weeklySch._clear();
        calendarDateSch._clear();
        calendarTimeSch._clear();
        $("#service_schedule_start_date, #service_schedule_end_date").val("");
        $(".form-inline[data-schedule-type != '" + schedule_type + "']").hide();
        $(".form-inline[data-schedule-type = '" + schedule_type + "']").show();
      });

      $(".form-inline[data-schedule-type = '" + $("#service_schedule_service_schedule_type_id").val() + "']").show();
      $(".form-inline[data-schedule-type != '" + $("#service_schedule_service_schedule_type_id").val() + "']").hide();

      $(".start-time").closest(".schedule-body").each(function() {
        if ($(this).find(".start-time").val() == "" && $(this).find(".end-time").val() == "") {
          $(this).hide();
        }
      });

      fh.form.on("submit", function(e) {
        let formValid = true;

        if ($(".calendar-date:visible").length == 0) {
          e.preventDefault();
          alert("Service schedule must contain at least one calendar date.");
          formValid = false;
        }

        $(".sub-schedule-container .calendar-date:visible, .sub-schedule-container select:visible").each(function() {
          if ($(this).val() == "") {
            e.preventDefault();
            $(this)[0].setCustomValidity("Field cannot be blank.");
            $(this)[0].reportValidity();
            formValid = false;
            return false;
          }
          else {
            $(this)[0].setCustomValidity("");
            formValid = true;
          }
        });
        if (formValid) {
          $(".start-time:visible").each(function() {
            if ($(this).val() > $(this).closest(".schedule-body").find(".end-time").val()) {
              e.preventDefault();
              $(this)[0].setCustomValidity("Start time cannot be after end time.");
              $(this)[0].reportValidity();
              formValid = false;
              return false;
            }
            else {
              $(this)[0].setCustomValidity("");
            }
          });
        }
      });

      $("input:visible, select:visible").on("change", function() {
        $(this)[0].setCustomValidity("");
      })
  });

:javascript
  $('.datepicker').datepicker({format: 'yyyy-mm-dd'});