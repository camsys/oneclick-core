-# NOTE: The local_assigns[:action] locals needs to exist so that we can set form inputs to readonly
  properly. Otherwise if @user.nil? == true, like in user creation, then the form locks up which
  is not desired
- can_update_user = (can? :update, @user)
- readonly_field = local_assigns[:action] == 'create' ? true : can_update_user
= f.input :email,
  required: true,
  :as => :string,
  readonly: !readonly_field
= f.input :first_name,
  required: false,
  :as => :string,
  readonly: !readonly_field
= f.input :last_name,
  required: false,
  :as => :string,
  readonly: !readonly_field
= f.input :password,
  required: true,
  :as => :password,
  readonly: !readonly_field
= f.input :password_confirmation,
  required: true,
  :as => :password,
  readonly: !readonly_field

-# If the current user can manage roles, is admin/ superuser, and the current user has more than one role
  then display the role management form
  - the staff locals is true if we're creating or editing a staff user
-if (can? :manage, Role) && (current_user.admin? || current_user.superuser?) && staff == true
  %hr
  %h4.text-center Roles
  = f.input :roles,
    label: "User Role",
    required: true,
    prompt: '',
    selected: @user.roles.last.try(:name) || :staff,
    collection: RoleHelper::PERMISSIBLE_CREATES[current_user.roles_name.last.to_sym],
    readonly: @user.valid? && (@user == current_user || !readonly_field)
  = f.input :staff_agency,
      as: :select,
      collection: current_user.accessible_agencies.order(:name),
      label: "Staff for: ",
      selected: @user.staff_agency&.id || @user.current_agency&.id,
      include_blank: "Select an Agency",
      readonly: @user.id == current_user.id
